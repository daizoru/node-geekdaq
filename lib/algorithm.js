// Generated by CoffeeScript 1.4.0
(function() {
  var deck;

  deck = require('deck');

  module.exports = function(options) {
    var i, kernel, level, levels, nbLevels, range, width, _i, _ref, _ref1, _results;
    if (options == null) {
      options = {};
    }
    width = (_ref = options.range) != null ? _ref : 1;
    nbLevels = (_ref1 = options.levels) != null ? _ref1 : 100;
    range = (function() {
      _results = [];
      for (var _i = -width; -width <= width ? _i <= width : _i >= width; -width <= width ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    kernel = function(level) {
      return Math.round(Math.random() * level);
    };
    levels = (function() {
      var _j, _results1;
      _results1 = [];
      for (level = _j = 1; 1 <= nbLevels ? _j <= nbLevels : _j >= nbLevels; level = 1 <= nbLevels ? ++_j : --_j) {
        _results1.push({
          cycles: level,
          i: level,
          values: (function() {
            var _k, _len, _results2;
            _results2 = [];
            for (_k = 0, _len = range.length; _k < _len; _k++) {
              i = range[_k];
              _results2.push(kernel(level));
            }
            return _results2;
          })()
        });
      }
      return _results1;
    })();
    return function() {
      var distribution, j, _j, _k, _l, _len, _len1, _len2;
      for (_j = 0, _len = levels.length; _j < _len; _j++) {
        level = levels[_j];
        level.cycles--;
        if (level.cycles <= 0) {
          level.cycles = level.i;
          level.values = (function() {
            var _k, _len1, _results1;
            _results1 = [];
            for (_k = 0, _len1 = range.length; _k < _len1; _k++) {
              i = range[_k];
              _results1.push(kernel(level.i));
            }
            return _results1;
          })();
        }
      }
      distribution = {};
      j = -1;
      for (_k = 0, _len1 = range.length; _k < _len1; _k++) {
        i = range[_k];
        distribution[i] = 0;
        j++;
        for (_l = 0, _len2 = levels.length; _l < _len2; _l++) {
          level = levels[_l];
          distribution[i] += level.values[j];
        }
      }
      return Number(deck.pick(distribution));
    };
  };

}).call(this);
